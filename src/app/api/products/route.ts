import Product from "@/lib/database/models/products.model";
import { connectToDb } from "@/lib/utils/connect";
import mongoose from "mongoose";
import { NextRequest, NextResponse } from "next/server";


//FECTH ALL CATEGORIES
export const GET = async(req:NextRequest) => {
    const {searchParams} = new URL(req.url)
    const category = searchParams.get('category') || '';
    const page = searchParams.get("page") || "1"
    const limit = searchParams.get("limit") || "6"


    try {
        await connectToDb();
        const query: any = {};
        if (category) {
            query.catSlug = category; // Assuming 'catSlug' is the field in your product model
        }
        // const products = await Product.find(query)
        //     .limit(parseInt(limit))
        //     .skip((parseInt(page) - 1) * parseInt(limit));

            const products = await Product.find(query).skip((parseInt(page) - 1) * parseInt(limit)).limit(parseInt(limit));

        const count = await Product.countDocuments(query);

        return new NextResponse(
            JSON.stringify({
                products,
                count,
                hasMore: parseInt(page) * parseInt(limit) < count
            }),
            {status:200}
        )
    } catch (error) {
        console.error(error);
        return new NextResponse(
            JSON.stringify({ error: "Something went wrong" }),
            {status:500}
        )
    }
}



export const POST = async(req:NextRequest) => {
    try {
        await connectToDb();
        const body = await req.json();

        // Ensure title is included in the body
        if (!body.title) {
            return new NextResponse(
                JSON.stringify({ error: "Title is required" }),
                { status: 400 }
            );
        }

        // Ensure _id is not included in the body if it's generated by the database
        const product = await Product.create({ ...body, _id: new mongoose.Types.ObjectId() });
        return new NextResponse(JSON.stringify(product), { status: 201 });
    } catch (error) {
        console.error(error);
        return new NextResponse(
            JSON.stringify({ message: error instanceof Error ? error.message : "Something went wrong" }),
            { status: 500 }
        );
    }
}
